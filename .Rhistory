source("functions.R")
extdata_paths <- extdata_path()
extdata_paths
extdata_paths <- extdata_path()
source("functions.R")
extdata_paths <- extdata_path()
extdata_paths
#
# packages String (optional). The name of one or more packages. `NULL` defaults
#   to all packages in installed in your system.
# regexp String. A regular expression to pick paths matching it.
# ... Other arguments passed on to fs::dir_ls.
#
# examples
# extdata_path()
# extdata_path(regexp = "mtcars")
# extdata_path("vroom", "mtcars")
extdata_path <- function(packages = NULL, regexp = NULL, ...) {
packages <- packages %||% rownames(installed.packages())
files <- lapply(packages, extdata_path_one, regexp = regexp, ...)
unname(unlist(files))
}
extdata_path("vroom", "mtcars")
# Paths to installed external data from packages
#
# Creates paths to R-package-files installed in your system.
#
# packages String (optional). The name of one or more packages. `NULL` defaults
#   to all packages in installed in your system.
# regexp String. A regular expression to pick paths matching it.
# ... Other arguments passed on to fs::dir_ls.
#
# examples
# extdata_path()
# extdata_path(regexp = "mtcars")
# extdata_path("vroom", "mtcars")
extdata_path <- function(packages = NULL, regexp = NULL, ...) {
packages <- packages %||% rownames(installed.packages())
files <- lapply(packages, extdata_path_one, regexp = regexp, ...)
unname(unlist(files))
}
extdata_path_one <- function(package, regexp, ...) {
dir <- tryCatch(
system.file("extdata_path", package = package, mustWork = TRUE),
error = function(e) character(0)
)
fs::dir_ls(dir, regexp = regexp, ...)
}
# Paths to installed external data from packages
#
# Creates paths to R-package-files installed in your system.
#
# packages String (optional). The name of one or more packages. `NULL` defaults
#   to all packages in installed in your system.
# regexp String. A regular expression to pick paths matching it.
# ... Other arguments passed on to fs::dir_ls.
#
# examples
# extdata_path()
# extdata_path(regexp = "mtcars")
# extdata_path("vroom", "mtcars")
extdata_path <- function(packages = NULL, regexp = NULL, ...) {
packages <- packages %||% rownames(installed.packages())
files <- lapply(packages, extdata_path_one, regexp = regexp, ...)
unname(unlist(files))
}
extdata_path_one <- function(package, regexp, ...) {
dir <- tryCatch(
system.file("extdata", package = package, mustWork = TRUE),
error = function(e) character(0)
)
fs::dir_ls(dir, regexp = regexp, ...)
}
library(shiny)
library(fs)
library(rlang)
runApp()
full_paths <- extdata_path()
runApp()
filenames <- sort(fs::path_file(full_paths))
runApp()
extensions <- fs::path_ext(file_names)
read_rda <- function(name) {
e <- new.env()
load(name, envir = e)
e[[name]]
}
source("packages.R")
source("functions.R")
full_paths <- extdata_path()
file_names <- sort(fs::path_file(full_paths))
read_data <- function(path) {
extension <- fs::path_ext(path)
data <- switch(extension,
"csv" = readr::read_csv(path),
"tsv" = readr::read_tsv(path),
"rds" = readr::read_rds(path),
stop("Can't read files with extension: ", ext, call. = FALSE)
)
data
}
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = file_names),
tableOutput("table")
)
server <- function(input, output, session) {
dataset <- reactive({
})
output$table <- renderTable({
dataset()
})
}
shiny::shinyApp(ui, server)
path <- tempfile()
path <- readr::write_csv(mtcars, "mtcars.csv")
read_data(path)
path <- readr::write_csv(mtcars, "mtcars.csv")
read_data(path)
path
path <- tempfile()
readr::write_csv(mtcars, "mtcars.csv")
read_data(path)
path
path <- tempfile("mtcars.csv")
readr::write_csv(mtcars, path)
read_data(path)
path
path <- tempfile(ext = "csv")
readr::write_csv(mtcars, path)
read_data(path)
path
path <- fs::temp_file(ext = "csv")
path <- fs::path(tempdir(), "mtcars.csv")
readr::write_csv(mtcars, path)
read_data(path)
readr::write_rds(mtcars, path)
read_data(path)
path <- fs::path(tempdir(), "mtcars.rds")
readr::write_rds(mtcars, path)
read_data(path)
head(read_data(path))
path <- fs::path(tempdir(), "mtcars.rds")
readr::write_rds(mtcars, path)
head(read_data(path))
library(tibble)
use_r("imports")
check()
